using Avalonia.Controls;
using Avalonia.Interactivity;
using Avalonia.Platform.Storage;
using Microsoft.VisualBasic;
using System;
using System.Collections.Specialized;
using System.IO;
using System.Text;

namespace PenTestTools.Views;

public partial class MainView : UserControl
{
    public string? passwordListPath { get; set; }
    public string? usernameListPath { get; set; }

    public MainView()
    {
        InitializeComponent();

        // Find the inputs and text to change
        var statusText = this.Find<TextBlock>("statusText");
        var timeoutEnabled = this.Find<CheckBox>("timeoutEnabled");
        var timeoutSeconds = this.Find<NumericUpDown>("timeoutSeconds");
        var maxAttempts = this.Find<TextBox>("maxAttempts");
        var capitalRequirement = this.Find<CheckBox>("capitalRequirement");
        var specialRequirement = this.Find<CheckBox>("specialRequirement");
        var lowerRequirement = this.Find<CheckBox>("lowerRequirement");
        var numberRequirement = this.Find<CheckBox>("numberRequirement");

        // Find our buttons in the XAML window to register click events.
        var signInButton = this.Find<Button>("checkDomainButton");
        var usernameButton = this.Find<Button>("openUserListButton");
        var passwordButton = this.Find<Button>("openPassListButton");

        if (signInButton != null )
            signInButton.Click += CheckDomainButtonClicked;
        if (usernameButton != null)
            usernameButton.Click += UsernameListButtonClicked;
        if (passwordButton != null)
            passwordButton.Click += PasswordListButtonClicked;
    }

    public void CheckDomainButtonClicked(object source, RoutedEventArgs args)
    {
        AuthUserList(passwordListPath, usernameListPath);
        // Ensure that the text block isn't empty
        if (domainTextBox.Text != null)
        {
            string returned = ActiveDirectoryTools.ConnectActiveDirectory(domainTextBox.Text);
            if(returned != "")
            {
                statusText.Text = "Status: " + returned;
            }
        }
        else
        {
            statusText.Text = "Status: Cannot Check Empty Domain";
        }
    }

    public async void PasswordListButtonClicked(object source, RoutedEventArgs args)
    {
        var topLevel = TopLevel.GetTopLevel(this);

        var files = await topLevel.StorageProvider.OpenFilePickerAsync(new FilePickerOpenOptions
        {
            Title = "Open Password List Text Document",
            AllowMultiple = false
        }) ;

        if (files.Count >= 1)
        {
            passwordListPath = files[0].TryGetLocalPath();
            passwordTextbox.Text = passwordListPath;
        }
    }

    public async void UsernameListButtonClicked(object source, RoutedEventArgs args)
    {
        var topLevel = TopLevel.GetTopLevel(this);

        var files = await topLevel.StorageProvider.OpenFilePickerAsync(new FilePickerOpenOptions
        {
            Title = "Open Username List Text Document",
            AllowMultiple = false
        });

        if (files.Count >= 1)
        {
            usernameListPath = files[0].TryGetLocalPath();
            usernameTextbox.Text = passwordListPath;
        }
    }
    public void AuthUserList(string userListPath, string passListPath)
    {
        String[] usersList;
        String[] passList;
        // May want to use a logger instead of this. Custom or something else.
        FileStream outputFileStream;

        try
        {
            usersList = File.ReadAllLines(userListPath);
            passList = File.ReadAllLines(passListPath);
            outputFileStream = File.Create(AppDomain.CurrentDomain.BaseDirectory + "/output.txt");

            int passwordIndex = 0;
            String currentPassword = "";
            foreach(String user in usersList)
            {
                currentPassword = passList[passwordIndex];
                ActiveDirectoryTools.AuthenticateUser(user, currentPassword);
                passwordIndex++;
            }

            /* Example on how to write to the file output.
            Byte[] info = new UTF8Encoding(true).GetBytes("This is some text in the file.");
            // Add some information to the file.
            outputFileStream.Write(info, 0, info.Length);
            */

        }
        catch (Exception ex)
        {
            statusText.Text = "Status: " + ex.Message;
            return;
        }
    }

}
